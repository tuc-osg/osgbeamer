#!/usr/bin/perl
#################################################
# OLLM - OSG LaTeX Lecture Maker
# 
# An extension for latexmk to support 
# osgbeamer.cls
#
# DISCLAIMER:
# This is my first piece of Perl code I've
# ever written. 
# Thus, probably, it shows bad style and it is 
# quite unelegant.
# However, it seems to work.
#################################################
use strict;
use 5.30.0;
use warnings;
use File::Basename;
my $progname = 'ollm';

# Determine way of calling,         
# restart if needed
if (basename($0) eq $progname) {
  # not called as rc file, restart
  my @execarray = ("latexmk","-norc","-r",$0,@ARGV);
  exec @execarray;
}
# Now the script is called as a rc of latexmk
#####################################
# MAIN                              #
#####################################
package ollm;
use 5.30.0;
use feature 'signatures','lexical_subs','switch';
#no warnings 'experimental::signatures','experimental::smartmatch';
use strict;
use warnings;
use version; our $VERSION = version->declare('0.11.2');

use File::Basename;
use File::Copy;
use File::Which;
use Getopt::Long qw(GetOptions);
use Pod::Usage;
use Cwd qw(cwd getcwd);
use List::MoreUtils qw(firstidx);
use Term::ANSIColor;

no warnings 'experimental::signatures';
package main;
#####################################
# Config-Variablen und Defaults     #
#####################################
# For semantics, see latexmk manual
{
  no warnings; 
  @main::default_files=("./main.tex");
  $main::pdf_mode=4;
  $main::lualatex = 'lualatex --shell-escape --synctex=1 %O %P';
  $main::silent = 1;
  $main::recorder=1;
  $main::clean_ext="bbl ext nav snm vrb lbr fls log fdb_latexmk";
  $main::compiling_cmd="tput setaf 4; echo \"Start TeXing %B...\";  tput init";
  $main::aux_dir="";
  $main::emulate_aux=0;
  $main::jobname='';
  $main::makeindex='texindy -M lang/german/duden-utf8 -M base/ff-ranges -M base/latin-lettergroups';
}

package ollm;
my $ollmver ='';
my $doctype="slides";
my $lang='';
my $lectconfig='lectdates';
my $lectureprefix="lecture";
my $defaultlanguage='de';
my $osgbeamer_dir = '';
my $do_publish = 0;
my $first_chapter_number = undef;
my @first_chapter_number = undef;
my $shared_source_dir ='../Include';
my $shared_data_dir='../Ref';
my $standalone=0;
my $config_file = '../ollmconfig.pl';
my %deploy_path;
my %deploy_file;
my %deploy_restriction;
my $deploy_pw;
my $shell_escape=0;
$deploy_file{all} = '${prefix}-${num}-${doctype}-${lang}-${topic}';

greeting();

Getopt::Long::Configure("pass_through"); # all unknown options will be passed to latexmk

my $forceoptplus=0;
foreach ( @ARGV ) {
  if ($_ eq '+force+') {                 # this option enforces '+' prefix for ollm options
                                         # in this way, file names like 'slides' are possible
    $forceoptplus=1;
  }
  if ($_ eq '--help') {
    &main::print_help;
    say colored("\nFor help on ollm call:",'bold')," 'ollm +help | +h'";
    exit;
  }
  if ($_ eq '--') {last;}
}
Getopt::Long::Configure("long_prefix_pattern=-|--");      
GetOptions ("jobname=s" => \$main::jobname); # catch standard option 'jobname'
# reinsert jobname
if (!($main::jobname eq '')) {
  push(@ARGV ,'--jobname='.$main::jobname);
}
Getopt::Long::Configure("prefix=+");     # ollm options starts with '+'
if ($forceoptplus == 0) {
    foreach ( @ARGV ) {
	# check for bare ollm options and add prefix (if no +force+)
  $_ = '+'.$_ if $_ =~ /^(slides|beamer|presentation|script|article|handout|standalone|publish|debug|verbose|lang|classpath|nosocket)/;
	if ($_ eq '--') {last;}
    }
}
# First, process options that are relevant for 'standalone' mode
GetOptions(
	   'standalone' => \$standalone,
	   'classpath=s' => \$osgbeamer_dir,
	   'verbose|debug' => sub { $main::silent=0; },
	   'h|help|?' => \&ollm_print_help
	  );
if ($standalone) {
  # In case of 'standalone' we return to latexmk
  if ($osgbeamer_dir ne '') {
    tex_path($osgbeamer_dir);
  }
  return 1; 
}
# Check directory structure
if (!is_ollmtree()) {
  print colored("Error: No proper directory structure. Try option \'standalone\'.\n",'red');
  exit(-1); # exit() returns to shell, not to latexmk
}

# remaining ollm options
GetOptions(
	   # 
	   'ollmconfig=s' => \$config_file,
	   'lang=s' => \$lang,
	   # 'slides', 'beamer', or 'presentation' for doctype 'slides'
	   'slides|beamer|presentation' => sub {
	     $doctype='slides';
	     if (is_beamer_dir() == 0) {
	       say "Error: Directory is not intended for beamer document!\n";
	       exit(-1);
	     }
	   },
	   # 'script' or 'article' for doctype 'script'
	   'script|article' => sub {
	     if (is_article_dir() == 0) {
	       say "Error: Directory is not intended for article document!\n";
	       exit(-1);
	     }
	     $doctype='script';
	   },
	   'handout' => sub {
	     $doctype='handout';
	     if (is_beamer_dir() == 0) {die
	       say color('red')."Error: Directory is not intended for beamer document!\n".color('reset');
	       exit(-1);
	     }
	   },
	   'publish' => \$do_publish,
	   'nosocket' => sub {
	       $main::lualatex = 'lualatex --shell-escape --synctex=1 --nosocket %O %P';
	     }
	  );

## Read and process config file
unless ( -e  $config_file) {
  die color('red')."Error: Can't find config file '".$config_file."'\n".
  color('faint')."If you have an old config file, rename it to 'ollmconfig.pl'\n".color('reset');
}

# Make @ARGV local and save $config_file as first element of @ARGV.
# The empty diamond operator <> opens first element of  @ARGV as file.
my $confcode = do{local(@ARGV,$/)=$config_file;<>};
# process content of config file
eval $confcode;
print color('reset');
if ($@) {
  print color('red');
  say "Error: Can't parse \'$config_file\': ",$@;
  print color('reset');
  exit(-1);
}
if ($ollmver eq '') {
  print color('red');
  print color('faint');
  say "Warning: Config file does not specifiy version.";
  say "         Prepare for troubble due to old config file.";
  print color('reset');
} elsif ( version->parse($ollmver) != version->parse($VERSION)) {
  print color('red');
  print color('faint');
  say "Warning: Version of config file doesn't match ollm version.";
  say "         Prepare for troubble.";
  print color('reset');
}
if ($osgbeamer_dir ne '') {
  tex_path($osgbeamer_dir);
}
tex_path($shared_source_dir);

# Ollm has (currently) two main purposes
#  1. Prepate latexmk to generate proper documents in ollm directory structure
#  2. Publish documents
if ($do_publish) {
  publish();
} else {
  say "Make document";
  make_document();
}
return 1;

##
## End of top-level
##
sub make_document {
  my $number;
  my $current_first_chapter;
  my $topic;
  if ($lang eq '') {
    $lang = $defaultlanguage;
  }
  if ($shell_escape == 1) {
   # $main::lualatex = 'lualatex --shell-escape --synctex=1 %O %P';
  }
  # Determine the number of the current directory (starting with 0)
  ($number,$topic) = lect_descr($doctype);
  ($number,$current_first_chapter) = curr_number($number);
  # We need TeX code to be executed *before* the actual document
  # '\DocumentMetadata' is needed if we do pdf tagging
  if ($lang eq "en") {
    $main::pre_tex_code='\DocumentMetadata{pdfversion=1.7,lang=en-US}';
  } else { # $lang should be 'de'
    $main::pre_tex_code='\DocumentMetadata{pdfversion=1.7,lang=de-DE}';
  }
  if ($number < 0) {
    $number = '_'.abs($number);
  }
  #$main::aux_dir=$shared_data_dir;
  #$main::emulate_aux=1;
  # the remaining information will be coded within the job name
  #  <lectureprefix>-<number>-<doctype>-<language>-<topic>
  $main::jobname = $lectureprefix.'-'.$number.'-'.$doctype.'-'.$lang.'-'.$topic;
}
 
sub publish(){
  # names of variables as used in config file
  my $num;
  my $topic;
  my $prefix=$lectureprefix;
  # language(s) as array in case, both language variants should be published at the same time
  my @langs;
  my %possible_rights = ( 'p' => 'Printing', 'c' => 'CopyContents',
			  's' => 'ScreenReaders', 'm' => 'ModifyAnnotations',
			  'd' => 'DegradedPrinting', 'a' => 'ModifyAnnotations',
			  'j' => 'Assembly');

  if (exists($deploy_path{'article'})) { $deploy_path{'script'} = $deploy_path{'article'}};
  if (exists($deploy_path{'beamer'})) { $deploy_path{'slides'} = $deploy_path{'beamer'}};
  if (exists($deploy_path{'presentation'})) { $deploy_path{'slides'} = $deploy_path{'presentation'}};
  if (!exists($deploy_path{$doctype}) and !exists($deploy_path{'all'})) {
    die color('red')."Error: No path for publishing given for document type $doctype.\n".color('reset');
  }
  if (!exists($deploy_path{$doctype})) { $deploy_path{$doctype} =  $deploy_path{'all'}; } 

  if (exists($deploy_file{'article'})) { $deploy_file{'script'} = $deploy_file{'article'}};
  if (exists($deploy_file{'beamer'})) { $deploy_file{'slides'} = $deploy_file{'beamer'}};
  if (exists($deploy_file{'presentation'})) { $deploy_file{'slides'} = $deploy_file{'presentation'}};
  if (!exists($deploy_file{$doctype}) and !exists($deploy_file{'all'})) {
    # Should never happen since a $deploy_file{'all'} is set be default
    die color('red')."Error: No path for publishing given for document type $doctype.\n".color('reset');
  }
  if (!exists($deploy_file{$doctype})) { $deploy_file{$doctype} =  $deploy_file{'all'}; } 

  if (exists($deploy_restriction{'article'})) { $deploy_restriction{'script'} = $deploy_restriction{'article'}};
  if (exists($deploy_restriction{'beamer'})) { $deploy_restriction{'slides'} = $deploy_restriction{'beamer'}};
  if (exists($deploy_restriction{'presentation'})) { $deploy_restriction{'slides'} = $deploy_restriction{'presentation'}};
  
  if ($lang eq '') {
    $lang = $defaultlanguage;
  }
  ($num, $topic) = lect_descr($doctype);
  ($num,$_) = curr_number($num);
  if ($num < 0) {
        $num = '_'.abs($num);
  }
  if ($lang eq 'all') {
    @langs = ('de','en');
  } else {
    @langs = $lang;
  }
  # In case of restrictions, check pdf toolkit
  if (keys %deploy_restriction != 0) {
    die "Deploy restrictions are not implemented yet";
    my $pdftk = which('pdftk');
    if (!defined($pdftk)){
      print colored('Error: Configuration requests pdf restrictions, but I can\'t find \'pdftk\'.','red');
      exit(-1);
    }
    if (!defined($deploy_pw)) {
      $deploy_pw = $prefix.'123456';
    }
    #foreach $char (split('', $text)){}
    print "RESTRICTIONS APPY\n";
    print 'Use password '.$deploy_pw."\n";
  } else {
    #print 'NO RESTRICTIONS\n';
  }
  # More than one path possible => use arrays
  my $patharrayref = $deploy_path{$doctype};
  # Override by Jobname
  if (!($main::jobname eq '')
      and
      (exists($deploy_path{"$main::jobname"}))
     ) {
    $patharrayref = $deploy_path{"$main::jobname"};
  }
  # Override by file name
  opendir my $hdir, '.';
  my $rx = qr/\A\Q$lectureprefix\E-.*-\Q$doctype\E.*\.pdf/;
  my ($matching) = grep { /$rx/ && -f $_ } readdir $hdir; # erstes Match
  if ( ($matching) and (exists($deploy_path{"$matching"}))) {
    $patharrayref = $deploy_path{"$matching"};
  }
  ## Normalize hashes
  # single elements are converted to an array reference
  $patharrayref = [ $patharrayref ] if ref $patharrayref eq '';
   my $source_pdffile_name;
  for my $l (@langs) {
    if (!($main::jobname eq ''))  {
      $source_pdffile_name = $main::jobname.'.pdf';
    } else {
      $source_pdffile_name = $lectureprefix.'-'.$num.'-'.$doctype.'-'.$l.'-'.$topic.'.pdf';
    }
    if (-e "$source_pdffile_name") {
      for my $p  (@{ $patharrayref}) {
	my $lang = $l;
	my $deploy_file_name;
	my $evalstr;
	if ( ($matching) and (exists($deploy_file{"$matching"}))) {
	  $evalstr = "\$deploy_file_name= \"$deploy_file{$matching}.pdf\"";
	} elsif (!($main::jobname eq '') and (exists($deploy_file{"$main::jobname"}))) {
	  $evalstr = "\$deploy_file_name= \"$deploy_file{$main::jobname}.pdf\"";
	}  else {
	  $evalstr = "\$deploy_file_name= \"$deploy_file{$doctype}.pdf\"";
	}
	eval $evalstr;
	say "Copy \'$source_pdffile_name\' to \'$p$deploy_file_name\'";
	copy($source_pdffile_name,$p.$deploy_file_name);
      }
    } else {
      say "Can't find file '$source_pdffile_name', skipping.";
      say "  Did you run 'ollm $doctype'?";
    }
  }
  exit(0)
}

#####################################
# Aux functions
#####################################

sub is_beamer_dir {
  # true (1) if current directory is intended for slides/beamer
  my $dir = basename(getcwd());
  if ($dir =~ /^[0-9][0-9][0-9][b]?-.*/) {
    1;
  } else {
    0;
  }
}

sub is_article_dir {
  # true (1) if current directory is intended for article/script
  my $dir = basename(getcwd());
  if ($dir =~ /^[0-9][0-9][0-9][a]?-.*/) {
    1;
  } else {
    0;
  }
}

sub is_ollmtree {
  # true (1) if current directory is ollm directory
  # vorgesehen ist, sonst false (0)
  if (( is_beamer_dir() == 1 ) or ( is_article_dir() == 1 )) {
    1;
  } else {
    0;
  }
}

sub doc_dirs ($type) {
  # doc_dirs(type)
  #
  # type: string (slides|script|article|handout)
  #
  # returns an ordered list of all ollm directories of the given type under the same parent directory
  if (!is_ollmtree()) {
    my @empty = ();
    return @empty;
  }
  my @dirs=glob ('../[0-9][0-9][0-9]-*');           # common directories
  if (($type eq 'slides') or ($type eq 'handout')){ # doctype-specific directories
    @dirs= (@dirs,glob ( '../[0-9][0-9][0-9]b-*'));
  } elsif (($type eq 'script') or ($type eq 'article')) {
    @dirs= (@dirs,glob ( '../[0-9][0-9][0-9]a-*'));
  }
  foreach my $d ( @dirs ) {	# cut path prefix
    $d = basename($d);
  }
  @dirs = sort @dirs;
  @dirs;
}

sub greeting {
  print colored("OLLM - OSG LaTeX Lecture Maker $VERSION: an extension for latexmk to support osgbeamer.cls\n\n", "bold");
}

sub ollm_print_help {
    print 
	"Usage: \n",
	" ", colored("Generate documents:\n","faint"),
	"  latexmk [<ollm options>] [<doctype>] [<latexmk options>] [<file>]\n",
	"  <doctype>: '+slides'|'+beamer'|'+handout'|'+script'|'+article' (default: '+slides')\n\n",
	"  <ollm options> (prefix '+' may be skipped if +force+ is not set)\n",
	"   +force+:            enforces use of '+' prefix for ollm options\n",
	"   +standalone:        disable most features of OLLM\n",
	"   +debug|+verbose:    additional information\n",
	"   +lang=[de|en]:      select language\n",
	"   +ollmconfig=<file>: reads configuration from <file> (default: '../ollmconfig.pl')\n",
	"   +classpath=<path>:  adds <path> to LaTeX search path, end with '//' to include subdirectories\n",
	"  <file> LaTeX file (default: 'main.tex'), *must* use osgbeamer class.\n\n",
	" ",colored("Deploy documents:\n","faint"),
	"  latexmk [lang=de|en|all] +publish <doctype>\n",
	"  <latexmk options>: see 'latexmk --help'\n"
	;
    exit;
}

sub lect_descr($type) {
  # lect_descr(type)
  #
  # type: string (slides|script|article)
  #
  # returns the current directory's index (position in the order of directories) and topic.
  # First index is 0
  if (!is_ollmtree()) {
    my $empty = undef;
    return $empty;
  } 
  my $topic_dir = basename(getcwd());
  my @all_dirs = doc_dirs($type);
  my $index = firstidx { /$topic_dir/ } @all_dirs;
  my ( $topic ) = $topic_dir=~ /[0-9][0-9][0-9][ab]?\-(.*)\s*$/;
  return ( $index,  $topic);
}

sub curr_number($n) {
  # curr_number(number)
  #
  # number: uncorrected number
  #
  # returns the adapted chapter number for given doctype
  my $number;
  my $current_first_chapter;
  # scalar: chapter number is the same for presentation and script
  # array: ([0]: presentation, [1]: script)
  if (defined($first_chapter_number)) {
    $current_first_chapter = $first_chapter_number;
  } elsif (defined($first_chapter_number[0])) {
    if ($doctype eq 'script') {
      $current_first_chapter =  $first_chapter_number[1];
    } else { # presentation or handout
      $current_first_chapter =  $first_chapter_number[0];
    }
  } else {
    # default: we start with 1
    $current_first_chapter =  1;
  }
  $number = $n + $current_first_chapter;	    
  $number=sprintf("%02d", $number);
  return ($number,$current_first_chapter);
}

sub tex_path($path){
  # add $path to TeX search path
  main::ensure_path( 'TEXINPUTS',$path);
}

# #$pdflatex="pdflatex -shell-escape -file-line-error -synctex=1 %O %P";


#####################################
# Dependencies                      #
#####################################
package main;
{
no warnings;
#add_cus_dep('eps','pdf',0,'eps2pdf');
#sub eps2pdf{
#  system("epspdf \"$_[0].eps\"" );
#}
#add_cus_dep('jpg','pdf',0,'jpg2pdf');
#sub jpg2pdf{
#  system("convert \"$_[0].jpg\" \"$_[0].pdf\"" );
#}
#
#add_cus_dep('jpeg','pdf',0,'jpeg2pdf');
#sub jpeg2pdf{
#  system("convert \"$_[0].jpeg\" \"$_[0].pdf\"" );
#}
#
#add_cus_dep('gif','pdf',0,'gif2pdf');
#sub gif2pdf{
#  system("convert \"$_[0].gif\" \"$_[0].pdf\"" );
#}
#sub rail{
#  system("rail \"$_[0]\"" );
#}
# comment in to build index (care for 'recursion')
#if ($lang eq 'de') {
#  
  $main::makeindex=''; #texindy -M lang/german/duden-utf8 -M base/ff-ranges -M base/latin-lettergroups -M ../Include/localidx';
#}
#
# add_input_ext('rao');
# add_input_ext('rai');
#add_cus_dep('rai','rao',0,'rail');
}
