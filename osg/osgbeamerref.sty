\NeedsTeXFormat{LaTeX2e}
\edef\packagename{osgbeamerref}
\ProvidesPackage{\packagename}[2022/06/16 v0.5.0]
\RequirePackage{luacode}
\RequirePackage{varsfromjobname}
\RequirePackage[user,xr,lastpage,abspage,perpage,%runs,
hyperref
]{zref}

\@ifclassloaded{osgbeamer}{% Nur in Verbindung mit osgbeamer sinnvoll
 }{
  \PackageError{osgbeamerref}{This package must be used together with
    'osgbeamer.cls' only.}
  \endinput
} 
\newcommand{\ifstreq}[4]{%
  \ifnum\pdf@strcmp{#1}{#2}=0%
  #3%
  \else%
  #4%
  \fi%
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% WARNUNG
% Dieser Code ist z.T. stark von Interna der Beamer-Klasse abhängig und damit
% anfällig für Versionsänderungen.
% Für künftige Versionen ist geplant, auf zref zu verzichten und alles über die
% Mechanismen von Hyperref laufen zu lassen, die in Beamer (und ltx-talk)
% bereits berücksichtigt werden
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\providebool{osgoptionstandalone}
\providebool{osgscript}
\providebool{noexport}
\DeclareKeys[osgbeamer]{
  standalone.code = {
    \booltrue{osgoptionstandalone}
    \boolfalse{osgscript}
  },
  final.code = {
    \providecommand{\missingref}{??}
  },
}
% Erweiterter LaTeX3-Syntax, vgl. Kommentar in osgbeamer.cls
% Todo: Geht z.T. jetzt auch so, überarbeiten.
\ExplSyntaxOn
\cs_generate_variant:Nn \keys_set:nn { nx }
\let\SetKeyEx=\keys_set:nx
% 'continuation' legt fest, ob die Seiten/Slides kapitelübergreifend
% numeriert werden.
% \addtocounter ist bei Slides nicht notwendig, da dort ein
% \refstepcount erfolgt.
\keys_define:nn {osgbeamerref}{
  continuation .choice: ,
  continuation/beamer .code:n = {
    \DeclareDocumentCommand{\omrsetcont}{m}{
      \ifcsstring{omr@doctypecode}{b}{
         \setcounter{framenumber}{##1}
       }{}
    }
    \DeclareDocumentCommand{\omrcontwarn}{}{
      \ifcsstring{omr@doctypecode}{b}{
            \omr@continuationwarning
      }{}
    }
  },
  continuation/article . code:n = {
    \DeclareDocumentCommand{\omrsetcont}{m}{
      \ifcsstring{omr@doctypecode}{a}{
        \setcounter{page}{##1}
        \addtocounter{page}{1} 
      }{}
    }
    \DeclareDocumentCommand{\omrcontwarn}{}{
      \ifcsstring{omr@doctypecode}{a}{
            \omr@continuationwarning
      }{}
    }
  },
  continuation/both . code:n = {
    \DeclareDocumentCommand{\omrsetcont}{m}{
      \ifcsstring{omr@doctypecode}{a}{
        \setcounter{page}{##1}
        \addtocounter{page}{1}
      }{
        \setcounter{framenumber}{##1}
      }
   }
    \DeclareDocumentCommand{\omrcontwarn}{}{
      \omr@continuationwarning
    }
  },
  continuation/none. code:n = {
    \DeclareDocumentCommand{\omrsetcont}{m}{}
    \DeclareDocumentCommand{\omrcontwarn}{}{}
  },
  standalone .code:n={
    \booltrue{osgoptionstandalone}
  },
  docid.code:n = {
    \providecommand\osg@docID{#1}
  },
  doctype.code:n = {
    \providecommand\omr@doctype{#1}
  },
  noexport.code:n={
    \booltrue{noexport}
  }
} 
\ExplSyntaxOff

% Als Vorgabe wird die Continuation nur im Article (Script) genutzt
\SetKeys[osgbeamerref]{continuation = article}
\ProcessKeyOptions[osgbeamerref]

\providecommand{\missingref}{\fcolorbox{red}{white}{??}}
\zref@setdefault {\missingref}
%%% DEBUG
\let\origzref@extractdefault=\zref@extractdefault
\renewcommand{\zref@extractdefault}[3]{\origzref@extractdefault{#1}{#2}{\fcolorbox{red}{white}{#1}}}

\ifbool{osgoptionstandalone}{
  % Im standalone-Mode wird "normal" referenziert. Warnung, wenn
  % explizit eine externe Referenz gerufen wird.
  \PackageWarningNoLine{\packagename}{standalone mode activated, chrossreferencing disabled}
  \NewDocumentCommand{\xref}{O{} m}{\ifstrempty{#1}{\ref{#2}}{\emph{no external references in standalone mode}}}
  \NewDocumentCommand{\xrefchap}{m}{\emph{no external references in standalone mode}}
}{
  % Properties für zref: chapter und frame.
  % Lezteres macht im article-Mode nicht wirklich Sinn (frames werden zwar mitgeführt, aber
  % nicht dargestellt), stehen aber in beiden Varianten zur Verfügung.
  \zref@newprop{beamer@frame}{\theframenumber}
  \zref@newprop{chapter}{\thechapter}
  \zref@addprop{main}{beamer@frame}
  \zref@addprop{main}{chapter}
  \IfBool{osgforcetoc}{%
    % Für das Script muss explizit das Anlegen eines Inhaltsverzeichnis
    % erzwungen werden, auch wenn es *hier* nicht eingelesen wird.
    %
      \AddToHook{begindocument}{
        % aus \@starttoc, aber ohne Wiedereinlesen
        \IfBool{osgforcetoc}{%
          \newwrite\tf@toc
          \immediate\openout\tf@toc\jobname.toc\relax
        }{}
      }
      % TODO: bessere Steuerung und Name
  }{}
  % Im OLLM werden einige Information über den Jobnamen übertragen. Der Jobname hat das Format
  % <lectureprefix>-<number>-<doctype>-<language>-<topic>
  \xdef\omr@generalprefix{\getfromjobname{1}}
  \ifnum0<0\getfromjobname{2}\relax
      \setcounter{chapter}{\getfromjobname{2}}
  \else
      \setcounter{chapter}{0}
  \fi
  % Da der chapter-Counter zu Kapitelbeginn einem \refstepcounter
  % unterliegt, muss für den korrekten Wert *im* Kapitel hier 1
  % abgezogen werden
  \addtocounter{chapter}{-1}
  \ifundef{\osg@docID}{\xdef\osg@docID{\arabic{chapter}}}{}
  \ifundef{\omr@doctype}{\xdef\omr@doctype{\getfromjobname{3}}}{}
  \xdef\omr@currenttopic{\getfromjobname{5}}
  \xdef\currenttopic{\getfromjobname{5}} % Auch als User-Macro, kann z.B. zur Einbindung von Quelltexten
                                         % oder anderen Source, die den Themenbaum nachbilden, genutzt werden.
  % Kürzel für den Doctype: a - article (script), b - beamer (alles andere)
  \ifdefstring{\omr@doctype}{script}{\gdef\omr@doctypecode{a}}{\gdef\omr@doctypecode{b}}
      % <doctype-prefix>-<lang>-<chaplabel>
  \NewExpandableDocumentCommand\omr@fullprefix{O{\omr@doctypecode} m}{#1-\selectedbeamerlanguage-#2}
  % Gibt das Kapitellabel (ohne Doctyp und Sprache) eines erweiterten Labels zurück
  \def\omrshortenprefix#1-#2-#3{#3}
  % Gibt den Doctype zurück
  \def\omrlongtypefromlabel#1-#2-#3|{%
    \ifx#1a script\fi%
    \ifx#1b beamer\fi%
  }
  % (Lua-)Liste der benötigten externen Referenzen. Dazu zählen auch die
  % Intertyp-Referenzen (Script vs. Beamer)
  \luaexec{
    required_ex_refs={}
  }
  % Fügt Element zur etool-Liste, falls es noch nicht enthalten ist.
  \newcommand{\addtolistcs}[2]{%
    \ifinlistcs{#2}{#1}{}{%
      \listcsgadd{#1}{#2}
    }
  }
  % Registriert extern zu referenzierendes Dokument
  \NewDocumentCommand\omrexternaldocument{m m}{%
    % Ruft lediglich \zexternaldocument auf.
    % Wurde eingeführt, falls auf xr statt zref-xr umgestellt werden
    % soll.
    \zexternaldocument[#1:]{#2}
  }
  \NewDocumentCommand\omr@ref{O{} o m O{default}}{%
    % Generischer Referenzbefehl, wird von den User-Referenzbefehlen genutzt.
    % Parameter:
    % #1: Kapitellabel (falls leer: aktuelles Kapitel)
    % #2: Typmarker [a]rticle/[b]eamer (falls nicht angegeben: aktueller Typ durch \omr@fullprefix)
    % #3: Label
    % #4: Property
    \ifstrempty{#1}{% lokale Referenz, wenn nichts angegeben
      \zref@extract{#3}{#4}%
    }{% Angabe eines Kapitellabels
      \IfNoValueTF{#2}{%
        \ifcsstring{beamer@currentlecturelabel}{#1}{% entspricht eigenem Label, ebenfalls lokal
              \zref@extract{#3}{#4}%
        }{% Protokolliere, welches Kapitel nachgefragt wurde.
          % Dessen aux-Datei wird (so eine vorliegt) im nächsten
          % Durchlauf über \omrexternaldocument geladen.
          % Sammlung erfolgt über die (interne) Liste osg@externrefs
        \write\@mainaux{\string\addtolistcs{osg@externrefs}{\omr@fullprefix{#1}}}%
        \zref@extract{\omr@fullprefix{#1}:#3}{#4}%
         }%
      }{% Bei Intertyp-Referenzen muss Kapitel ebenfalls protokolliert werden
        \write\@mainaux{\string\addtolistcs{osg@externrefs}{\omr@fullprefix[#2]{#1}}}%
        \zref@extract{\omr@fullprefix[#2]{#1}:#3}{#4}%
      }%
    }%
  }%
  % Erlaubt \omr@ref als User-Macro
  \let\omrref\omr@ref
  % Referenzbefehl, ersetzt \ref
  \NewDocumentCommand{\xref}{O{} m}{%
    % #1: Kapitellabel (definiert in \lecture)
    % #2: Referenzlabel
    % #3: Property (default = laufende Nummer entsprechend \refstepcounter o.ä.)
    \omr@ref[#1]{#2}[default]%
  }
  % Referenziert ein Kapitel
  \NewDocumentCommand{\xrefchap}{m}{%
    \ifstrempty{#1}{(\omr@ref[\beamer@currentlecturelabel]{osglecture})}{\omr@ref[#1]{osglecture}}%
  }
  % Referenziert in Beamer das Frame, im Script die Seite des Labels
  % In der Stern-Variante wird im Beamer-Modus das Kapitel vorangestellt.
  \NewDocumentCommand{\xrefsmart}{s O{} m}{%
    \alt<article>{%
      \ldeen{Seite}{page}~\omr@ref[#2]{#3}[page]%
    }{%
      \ldeen{Folie}{slide}~\IfBooleanT{#1}{\xrefchap{#2}-}\omr@ref[#2]{#3}[beamer@frame]%
    }%
  }
  % Überprüft, ob Label #3 auf der selben Seite steht, wie dieser
  % Befehl.
  % Falls nicht, wird der Text #4 gefolgt von der Seitennummer von #3
  % ausgegeben, ansonsten wird #2 ausgegeben.
  % Bei der Sternvariante wird der Ausdruck in Klammern gesetzt.
  \NewDocumentCommand{\xrefdist}{s O{} m m}{%
     \only<article>{%
       \edef\tmpr{\zref@extractdefault{#3}{page}{\missingref}}%
       % Annahme: \distref wird pro Referenz nur EINMAL genutzt
       % Sollte sich das ändern, muss der Suffix "-ref" durch einen Zähler
       % ersetzt/ergänzt werden.
       \edef\tmpp{\zref@extractdefault{#3-ref}{page}{\missingref}}\zlabel{#3-ref}%
       \ifstreq{\tmpp}{\tmpr}{#2}{\IfBooleanT{#1}{ (}#4\ \tmpr \IfBooleanT{#1}{)}}%
       }%
  }%
  % Erzwingt die Referenz auf das Artikel-Label (für Crosstype-Referenz)
  \NewDocumentCommand\xarticleref{O{} m}{
    \omr@ref[#1][a]{#2}[default]%
  }
  % Erzwingt die Referenz auf das Beamer-Label (für Crosstype-Referenz)
  \NewDocumentCommand\xpresentationref{O{} m}{
    \omr@ref[#1][b]{#2}[default]%
  }
  %%
  %% Try to hack hyperref
  %%
  \def\addcontentsline#1#2#3{% toc extension, type, tag
    \begingroup
      \let\label\@gobble
      \ifx\@currentHref\@empty
        \Hy@Warning{%
          No destination for bookmark of \string\addcontentsline,%
          \MessageBreak destination is added%
        }%
        \phantomsection
      \fi
      \expandafter\ifx\csname toclevel@#2\endcsname\relax
        \begingroup
          \def\Hy@tempa{#1}%
          \ifx\Hy@tempa\Hy@bookmarkstype
            \Hy@WarningNoLine{%
              bookmark level for unknown #2 defaults to 0%
            }%
          \else
            \Hy@Info{bookmark level for unknown #2 defaults to 0}%
          \fi
        \endgroup
        \expandafter\gdef\csname toclevel@#2\endcsname{0}%
      \fi
      \edef\Hy@toclevel{\csname toclevel@#2\endcsname}%
      \Hy@writebookmark{\csname the#2\endcsname}%
        {#3}%
        {\@currentHref}%
        {\Hy@toclevel}%
        {#1}%
      \ifHy@verbose
        \begingroup
          \def\Hy@tempa{#3}%
          \@onelevel@sanitize\Hy@tempa
          \let\temp@online\on@line
          \let\on@line\@empty
          \Hy@Info{%
            bookmark\temp@online:\MessageBreak
            thecounter {\csname the#2\endcsname}\MessageBreak
            text {\Hy@tempa}\MessageBreak
            reference {\@currentHref}\MessageBreak
            toclevel {\Hy@toclevel}\MessageBreak
            type {#1}%
          }%
        \endgroup
      \fi
      \stepcounter{abspage}%
      \addtocontents{#1}{%
        % \protect\contentsline{#2}{#3}{\thepage}{\@currentHref.2}\protected@file@percent
        \protect\contentsline{#2}{#3}{\thepage}{chapter.\thechapter.\theabspage}\protected@file@percent
      }%
      \addtocounter{abspage}{-1}%
    \endgroup
  }
  %%
  % Name der JSON-Datei mit den Referenzpfaden 
  % \OsgShareDataPath wird von OLLM-latexmkrc übergeben
  \xdef\omr@pathtoref{\OsgShareDataPath/\omr@generalprefix.gref} 
  
  \luaexec{
     require("util-jsn") % JSON-Lib
     allrefs = {}
     % 
     % getexternal(file,reflist) - liest externe Referenzen (und die letzte Seiten-/Framenummer) ein
     % 
     % File:    json-Datei mit den externen Referenzen
     % Reflist: Array mit den Suchprefixes als Schlüssel.
     getexternal = function(file,reflist)
        %for key, info in pairs(reflist) do
        %   tex.print("\\typeout{*********** IN REFLIST: ".. key .. "} ")
        %   end
        %tex.print("\\typeout{***** Look for >"..file.."<}")
        local f=io.open(file,"r")
        local foundcont = 0
        if (f == nil) then
                 tex.print("\\PackageWarningNoLine{osgbeamerref}{General reference file not found}")       
        else
           local json = f:read( "*a" )
           if (json ~= "") then
              allrefs = utilities.json.tolua(json)
              if (allrefs ~= nil) then
                 for key, info in pairs(allrefs) do
                    %tex.print("\\typeout{*********** BEFORE IMPORT KEY ".. info['prefix'] .. " PATH:"  .. info['path'] .."} ")                    
                    % Überprüfe, ob es sich um den Vorgänger in der OLLM-Sequenz handelt. Wenn ja,
                    % übernehme die Information für die letzte Seite.   
                    if ((tonumber(info['number'])+1 == \osg@docID) and ('\omr@doctypecode' == string.sub(info['prefix'],1,1))) then
                       tex.print("\\omrsetcont{" .. info['lastpage'] .. "}")
                       foundcont = 1
                    end
                    %tex.print("\\typeout{*********** TEST For PREFIX ".. info['prefix'] .. "} ")
                    if (reflist[info['prefix']] ~= nil) then
                          % Keine extra Warnung, wenn die Datei nicht existiert/lesbar ist, das übernimmt zref.
                          %tex.print("\\typeout{*********** WANT IMPORT WITH PREFIX ".. info['prefix'] .. " PATH:"  .. info['path'] .."} ")
                       tex.print("\\omrexternaldocument{" .. info['prefix'] .. "}{" .. info['path'] .. "}")
                       % Sucheintrag wird aus der Referenzliste gestrichen
                       reflist[info['prefix']] = nil
                    end
                 end
                 % Gebe für nichtgefundene (in reflist verbliebene) externe aux-Dateien Warnungen aus
                 for key, val in pairs(reflist) do
                    tex.print("\\AddToHook{enddocument/info}{\\PackageWarningNoLine{osgbeamerref}{Don't know \\omrlongtypefromlabel "
                        ..key.."| aux file\\MessageBreak for lecture label '\\omrshortenprefix "
                        ..key.."'.\\MessageBreak ".."Please tex the corresponding lecture}}")
                 end
                 % Warnung bei fehlendem Anschluss
                 if ((foundcont == 0) and (\arabic{chapter} ~= \OsgFirstChapter)) then
                    tex.print("\\omrcontwarn")
                 end
              else
                 tex.print("\\PackageWarningNoLine{osgbeamerref}{Global reference file is invalid, reinitiate}")
                 allrefs = {}
              end
           end
           f:close()
        end
     end
     %
     % updateref(file, label, lang, typecode, path, lastpage) - Schreibt bei Bedarf die gref-Datei
     % 
     % File:     json-Datei mit den externen Referenzen
     % Label:    Label des Kapitels
     % Lang:     Sprache, de|en
     % Typecode: a|b (doctypecode)
     % Path:     Pfad zum Verzeichnis mit der aux-Datei
     % Lastpage: Nummer der letzten Seite
     updateref = function(file, label, lang, typecode, path, lastpage)
        local prefix
        prefix = typecode .. '-' .. lang  .. '-' .. label 
        local info = {}
        local cnt = '\osg@docID'
        local ndx = cnt .. '-' .. typecode
        %tex.print("\\typeout{************ prefix == "..prefix..",
        %  chapter = "..ndx.."}")
        info['prefix'] = prefix
        local jobpath =  path .. '/' .. \luastring{\jobname}
        info['path'] = jobpath;
        info['lastpage'] = lastpage
        info['number'] = cnt
        if ((allrefs == {}) or (allrefs[ndx] == nil) or (allrefs[ndx]['lastpage'] == -1) or (allrefs[ndx]['lastpage'] ~= lastpage)) then
           allrefs[ndx] =info
           table.sort(allrefs) 
           local f=io.open(file,"w")
           if (f) then
              local json = utilities.json.tostring(allrefs)
              f:write(json)
              f:close()
           end
        end
     end
     %
     % getpathforchapternumber(nr) - Gibt Pfad für Kapitelnummer
     %
     % nr: Kapitelnummer
     getpathforchapternumber = function(nr)
       %tex.print(\luastring{\typeout{**** CALLED getpathforchapternumber}})
       if (allrefs ~= nil) then
          local ndx = tostring(tonumber(nr)-1)..'-'..\luastring{\omr@doctypecode}
          if allrefs[ndx] ~= nil then
            %tex.print("\\typeout{**** Path for "..nr..":"..allrefs[ndx]['path'].."}")
            tex.print("\\xdef\\omrcpath{"..allrefs[ndx]['path'].."}")
          else
            %tex.print("\\typeout{**** We~have~a~problem}")
            tex.print("\\AddToHook{enddocument/info}{\\PackageWarningNoLine{osgbeamerref}{Unknown path for chapter "..nr.."}}")
         end
       else
         tex.print(\luastring{\\PackageWarningNoLine{osgbeamerref}{Reference information invalid or not existing.}})
       end
     end    
     %
     % getpathforlabel(label) - Gibt Pfad für Kapitellabel TODO
     %
     % label: Kapitellabel
     getpathforlabel = function(label)
       if (allrefs ~= nil) then
          local fulllabel = \luastring{\omr@doctypecode}.."-\selectedbeamerlanguage-"..label
     %         for key, info in pairs(allrefs) do
     %            if info["prefix"] == fulllabel then
     %               tex.print("\\xdef\\omrcpath{"..info['path'].."}")
     %               break
     %            end
     %         end
     %      end
     %      tex.print("\\AddToHook{enddocument/info}{\\PackageWarningNoLine{osgbeamerref}{Unknown path for label '"..label.."'}}")
       end
     end    
   }
   
   \newrobustcmd{\omr@readref}{
     \luaexec{
       ltreflist={}
     }
     % Die etoolbox-Liste mit den benötigten Referenzen wird in eine
     % Lua-Tabelle gewandelt.
     % Anmerkung: Dieses Umkopieren ist sicher nicht sehr elegant,
     % hilft aber bei der Separation von LaTeX- und Lua-Code.
     \providecommand{\osg@externrefs}{} % Vermeide Error, wenn die
                                        % Liste noch nicht eingelesen
                                        % wurde (1. Run)
     \renewcommand*{\do}[1]{
       \luaexec{
         %tex.print("\\typeout{******** Add to lua ##1}")
         ltreflist[\luastring{##1}]=1
       }
     }
     \dolistloop{\osg@externrefs} % Ausführung der Schleife
     % In getexternal() werden (bereits bekannte) externe aux-Dateien eingelesen.
     \luaexec{
        getexternal(\luastring{\omr@pathtoref}, ltreflist)     
     }
   }

   \let\omrreadref\omr@readref
   \newrobustcmd{\omr@writeref}[1]{
     % Bei Beamer-Documenten zählen die Frames, im Scriptkapitel die
     % Seiten
     \ifcsstring{omr@doctypecode}{a}{
       \edef\tempa{page}
     }{
       \edef\tempa{beamer@frame}
     }
     % Falls noch keine Lastpage ermittelt wurde, wird sie auf 0 gesetzt
     \zref@def@extractdefault{\tlp}{LastPage}{\tempa}{0}
     \luaexec{
       updateref(
       \luastring{\omr@pathtoref},
       \luastring{#1},
       '\selectedbeamerlanguage',
       \luastring{\omr@doctypecode},
       \luastring{\OsgCurrentDir},
       \luastring{\tlp}
       )
     }
   }

   % Definiere \omrcpath als den Dateienpfad (ohne Extension) für das angegebene Kapitel
   \NewDocumentCommand\getPathForChapter{om}{%
     \IfNoValueF{\xdef\omr@doctypecode{#1}}
     \luaexec{
       getpathforchapternumber(\luastring{#2})
       }%
   }

   \newrobustcmd\getPathForLabel[1]{%
     \directlua{
       getpathforchapternumber(\luastring{#1})
     }%
   }

   \AddToHook{begindocument}{
     % Zu diesem Zeitpunkt ist die aux-Datei schon eingelesen.
     % Für die Crossreferenzierung müssen auch die anderen
     % (referenzierten) aux-Dateien gelesen werden.
     % \typeout{************ PATCH LABEL}
     \mode<article>{
       \glet\osglabel=\zlabel
       \glet\label=\zlabel
     }
     \omr@readref
   }
   % Bei noexport erfolgt *keine* Anpassung der gref-Datei. Sie wir nur gelesen
   % und deshalb können extern Referenzen genutzt werden.
   \ifbool{noexport}{}{
         \AddToHook{enddocument/afteraux}{
           % ggf. muss die gref-Datei angepasst werden.
           % Da darin auch die Nummer der letzten Seite/Folie übergeben wird, erfolgt dies
           % erst zu Ende der Dokumentverarbeitung
           \omr@writeref{\beamer@currentlecturelabel}
         }
   }

  \NewDocumentCommand\omr@continuationwarning{}{
    \PackageWarningNoLine{osgbeamerref}{
      No lecture continuation found, I start\MessageBreak
      with default value.\MessageBreak
      If this isn't the first lecture, please\MessageBreak
      tex the previous one.
    }
  }
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  % Label
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  % Es sieht so aus, als ob in der neuen Version \label von Beamer permanent neu
  % umgebogen wird. Daher definieren wir im Gegenzug \beamer@label um und rufen
  % von hier \zref@label auf.
  \mode<beamer>{
    \RenewDocumentCommand{\beamer@label}{R<>{1} m}{%
      \alt<#1>{\xdef\@currentHref{#2}\beamer@origlabel{#2}\zref@label{#2}\beamer@nameslide{#2}}{\beamer@dummynameslide}
    }
    \RenewDocumentCommand{\beamer@label@in@display}{R<>{1} m}{%
      \alt<#1>{\xdef\@currentHref{#2}\zref@label{#2}\beamer@origlabel@in@display{#2}\beamer@nameslide{#2}}{\beamer@dummynameslide}
    }
    
    % Wir wollen auch im presentation-Mode auf Abschnitte etc. referenzieren
    % können. Jedoch verhindert Beamer, dass das \label-Macro "wahrgenommen" wird.
    % Deshalb wird beamer@treat aus beamerbasemodes.sty gepatcht, um Abschnittslabel
    % für Slides/Handouts zu ermöglichen
    \newcommand{\osgpatchlabel}{%
      \patchcmd\beamer@treat{\fi\next}{%
        \fi%
        \ifx\beamer@nexttoken\label\let\oldnext=\next\let\next=\osg@parselabel\fi%
        \next%
      }{\PackageInfo{osgbeamerref}{Patch beamer label}%
      }{\PackageWarningNoLine{osgbeamerref}{Couldn't patch beamer label}%
     }
   }
   \begingroup
      \endlinechar=-1\relax%
      \gdef\osg@parselabel#1{%
        \zref@label{#1}%
        \beamer@modeoutsideframe
      }
   \endgroup
   \AddToHook{begindocument/end}{
     \mode<presentation>{%
       \osgpatchlabel%
      }
   }
 }
  \IfBool{osglegacy}{
    \NewCSDeprecatedCommand{osgexternaldocumentforce}{m m}{}[use\MessageBreak
    '\string\xarticleref' or '\string\xpresentationref', respectively,] 
  }

} % Ende für OLLM (und nicht 'standalone')


